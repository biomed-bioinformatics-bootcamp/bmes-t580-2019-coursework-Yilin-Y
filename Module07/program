import os # import the os modules to offer system to use operate system dependent functionality
import platform # it allows to access to underlying platform's identifying data
import subprocess # this module allows users to spawn new processes, which connect to their input/output/ error pipes to get the return codes

import cats_service # import the cats_service modules that we create before

def main(): # there are all main functions
    print_header()
    folder = get_or_create_output_folder()
    download_cats(folder)
    display_cats(folder)


def print_header(): # asking the system to print the header
    print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
    print('****************')
    print('                 *****************')
    print('            CAT FACTORY           ')
    print('****************')
    print('                 *****************')
    print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


def get_or_create_output_folder(): # creating the new folder which is named as "cat_pictures" for all outputs
    base_folder = os.path.dirname(__file__)
    folder = 'cat_pictures' # rename the folder as "cat_pictures"
    full_path = os.path.join(base_folder, folder) # obtain the path of the folder

    if not os.path.exists(full_path) or not os.path.isdir(full_path):
        print('Creating new directory at {}'.format(full_path))
        os.mkdir(full_path)

    return full_path


def download_cats(folder): # creats function for downloading the pictures
    print('Contacting server to download cats...')
    cat_count = 8 # download 8 cats pictures
    for i in range(1, cat_count+1):
        name = 'lolcat_{}'.format(i)
        print('Downloading cat ' + name)
        cats_service.get_cats(folder, name) # rename each cat's picture

    print('Done')


def display_cats(folder): # creating the function to display the cats pictures
    #open folder
    print('displaying cats in OS window. ')
    if platform.system() == 'Darwin':
        subprocess.call(['open', folder])
    elif platform.system() == 'Windows':
        subprocess.call(['explorer', folder])
    elif platform.system() == 'Linux':
        subprocess.call(['xdg-open', folder])
    else:
        # if the system is not one of the system that shows above, then print: we don't support your os + system name
        print("we don't support your os: " + platform.system())

if __name__ == '__main__':
    main()